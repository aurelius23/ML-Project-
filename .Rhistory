cols_pca <- grep("^IL", names(training), vlaue=TRUE)
cols_pca <- grep("^IL", names(training), value=TRUE)
cols_pca
cols_pca <- cols_pca + names(training) == "diagnosis"
names(training)
names(training) == "diagnosis"
which(names(training)) == "diagnosis"
cols_pca <- cols_pca + names(training)[1]
cols_pca
class(cols_pca)
cols_pca <- c(cols_pca, names(training)[1])
cols_pca
cols_pca <- grep("^IL", names(training), value=TRUE)
fit1 <- train(diagnosis~training[,cols_pca], method="glm",data = training)
cols_pca <- cols_pca + names(training)[1]
cols_pca1 <- c(cols_pca, names(training)[1])
data <- training[,cols_pca1]
fit1 <- train(diagnosis~.,methos="glm", data = data)
fit1 <- train(diagnosis~.,methos="glm", data = data)
fit1 <- train(diagnosis~.,method="glm", data = data)
fit1
names(data)
x <- train(diagnosis~.,method="glm",data = data)
x
x$finalModel
cols_pca1
test1 <- testing[,cols_pca]
pred <- predicti(fit1, test1)
pred <- predict(fit1, test1)
cols_pca1
test1 <- testing[,cols_pca1]
pred <- predict(fit1, test1)
confusionMatrix(pred,test1$diagnosis)
names(training)
names(data)
names(data[,-length(data)])
preProc <- preProcess(data[,-length(data)], method="pca", thresh = .8)
trainPC <- predict(prePRoc, data[,-length(data)])
trainPC <- predict(preProc, data[,-length(data)])
fit2 <- train(diagnosis~.,method="glm",data = trainPC)
fit2 <- train(data$diagnosis~.,method="glm",data = trainPC)
fit2 <- train(training$diagnosis~.,method="glm",data = trainPC)
names(data)
names(data[-length(data)])
preProc <- preProcess(data[-legnth(data)], method = "pca", thresh = 0.8)
preProc <- preProcess(data[-length(data)], method = "pca", thresh = 0.8)
preProc <- preProcess(data[,-length(data)], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, data[,-length(data)])
fit2 <- train(data$diagnosis ~.,method="glm", data = trainPC)
modelFit <- train(y=data$diagnosis,method="glm",x=trainPC)
fit2 <- modelFit
names(test1)
names(test)
test2 <- testing[,cols_pca1]
test1
names(test2)
testPC <- predict(preProc, test2[,-length(test2)])
pred2 <- predict(fit2,testPC)
confusionMatrix(test2$diagnosis,pred2)
install.pakcages("rattle")
install.packages("rattle")
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
library(rattle)
install.packages("https://togaware.com/access/rattle_5.0.14.tar.gz", repos=NULL, type="source")
library(rattle)
install.packages("Cairo Device")
install.packages("rattle")
library(rattle)
library(rattle)
data(iris)
names(iris)
table(iris$Species)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(ggplot2)
data(iris)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
library(ggplot2)
library(caret)
data(iris)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("ElemStatLearn")
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T) # crate sample
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2) # create smooth line
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155)) # predict values
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel, k=2)
getTree(modFit$finalModel,k=2)
?getTree
getTree(modFit$finalModel,k=2)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
data(iris); library(ggplot2); library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
?getTree
?getTree
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
getTree()
q()
getwd()
setwd("./Documents/Programming/R/ml_project/")
url1 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url1, destfile = "./train.csv", method="curl")
download.file(url2, destfile = "./test.csv", method="curl")
train <- read.csv("./train.csv")
test <- read.csv("./test.csv")
names(train)
unique(train$classe)
dim(test)
dim(train)
class(train$user_name)
unique(train$X)
range(train$X)
train2 <- train[,-c(X,user_name)]
train2 <- train[,-c("X","user_name")]
train2 <- train[,-c(1,2)]
names(train2)
train2 <- train[,-c(1,2)]
unique(is.na(train))
nsv <- nearZeroVar(train, saveMetrics = TRUE)
?nearZeroVar
??nearZeroVar
library(caret)
train <- read.csv("./train.csv")
test <- read.csv("./test.csv")
library(caret)
library(ggplot2)
train2 <- train[,-c(1,2)]
nsv <- nearZeroVar(train2, saveMetrics = TRUE)
nsv
?nzv
which(nsv$nzv == TRUE)
x <- which(nsv$nzv == TRUE)
x
train3 <- train2[,-c(x)]
names(train3)
dim(train3)
dim(train4)
dim(train2)
train3$classe
preProc <- preProcess(train3, method="pca", thresh = .9)
trainPC <- predict(preProc, train3)
dim(trainPC)
dim(test)
dim(train)
test$problem_id
test$X
test$user_name
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
train$raw_timestamp_part_1
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training2 <- training[,-c(1:7)]
nsv <- nearZeroVar(training2, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training3 <- training2[,-c(x)]
dim(training3)
dim(trainng3)
dim(training3)
training3[,102]
sum(is.na(training3$var_yaw_belt))
which(is.na(training3))
?complete.cases
colSums(is.na(training3))
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training2, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) != 0]
dim(training)
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
dim(training)
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
dim(training)
training <- training[,-c(1:7)]
dim(training)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
dim(training)
training2 <- training[,colSums(is.na(training)) != 0]
dim(training2)
training <- training[,colSums(is.na(training)) != 0]
preProc <- preProcess(training, method="pca", thresh = .9)
trainPC <- predict(preProc, train3)
preProc <- preProcess(training, method="pca", thresh = .9)
trainPC <- predict(preProc, training)
dim(trainPC)
install.package("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("doParallel")
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf", data = trainPC, trControl = fitControl)
?train
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = trainPC, trControl = fitControl)
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) != 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = trainPC, trControl = fitControl)
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = training, trControl = fitControl)
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
sum(is.na(training$classe))
training <- training[,colSums(is.na(training)) != 0]
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
sum(is.na(training$classe))
colSums(is.na(trainng))
colSums(is.na(training))
sum(is.na(training$var_accel_forearm))
training <- training[,colSums(is.na(training)) == 0]
dim(training)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = training, trControl = fitControl)
pred1 <- predict(fit1, testing)
confusionMatrix(pred1, testing$classe)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .7, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number = 4, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = training, trControl = fitControl)
pred1 <- predict(fit1, testing)
confusionMatrix(pred1, testing$classe)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fitControl <- trainControl(method="cv", number = 12, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf", preProcess= c("center","scale","pca"),data = training, trControl = fitControl)
pred1 <- predict(fit1, testing)
confusionMatrix(pred1, testing$classe)
preProc <- preProcess(training[,-length(training)], method = "center", "scale", "pca", thresh = .9)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .9)
trainPC <- predict(preProc,training)
names(trainPC)
fitControl <- trainControl(method="cv", number = 12, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training, trControl = fitControl)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .9)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
# training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .9)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training, trControl = fitControl,na.action = na.omit)
pred1 <- predict(fit1, testing)
confusionMatrix(pred1, testing$classe)
summary(fit1)
fit1$finalModel
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .9)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 8, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training, trControl = fitControl)
fit1 <- train(classe ~., method = "rf",data = training)
summary(fit1)
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .9)
trainPC <- predict(preProc,training)
# fitControl <- trainControl(method="cv", number = 8, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .8)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training,trControl = fitControl)
fit1 <- train(classe ~., method = "gbm",data = training,trControl = fitControl)
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
training <- training[,colSums(is.na(training)) == 0]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale", "pca"), thresh = .8)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 6, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = trainPC,trControl = fitControl)
pred1 <- predict(fit1, testing)
mostlyNAs <- sapply(training, function(x) mean(is.na(x))) > 0.95
training <- training[,mostlyNAs == FALSE]
testing <- testing[,mostlyNAs == FALSE]
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
testing <- testing[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
testing <- testing[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
testing <- testing[,-c(x)]
mostlyNAs <- sapply(training, function(x) mean(is.na(x))) > 0.95
training <- training[,mostlyNAs == FALSE]
testing <- testing[,mostlyNAs == FALSE]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
preProc <- preProcess(training[,-length(training)], method = c("center", "scale"), thresh = .8)
trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 4, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = trainPC,trControl = fitControl, preProcess = c("center", "scale"))
train <- read.csv("./train.csv")
validation <- read.csv("./test.csv")
library(caret)
library(ggplot2)
library(parallel)
library(doParallel)
set.seed(369)
inTrain <- createDataPartition(train$classe, p = .8, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
training <- training[,-c(1:7)]
testing <- testing[,-c(1:7)]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
x <- which(nsv$nzv == TRUE)
training <- training[,-c(x)]
testing <- testing[,-c(x)]
mostlyNAs <- sapply(training, function(x) mean(is.na(x))) > 0.95
training <- training[,mostlyNAs == FALSE]
testing <- testing[,mostlyNAs == FALSE]
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
# preProc <- preProcess(training[,-length(training)], method = c("center", "scale"), thresh = .8)
# trainPC <- predict(preProc,training)
fitControl <- trainControl(method="cv", number = 4, allowParallel = TRUE)
fit1 <- train(classe ~., method = "rf",data = training,trControl = fitControl, preProcess = c("center", "scale"))
pred1 <- predict(fit1, testing)
confusionMatrix(pred1, testing$classe)
dim(training)
predict(fit1, test, type = "classe")
predict(fit1, test, type = "class")
predict(fit1, test)
